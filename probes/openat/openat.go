package openat

import (
	"bytes"
	"encoding/binary"
	"errors"
	"log"

	"github.com/JamesYYang/jebpf/probes"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
	"golang.org/x/sys/unix"
)

type Openat_Probe struct {
	name   string
	bpf    *bpfObjects
	link   link.Link
	reader *ringbuf.Reader
}

func init() {
	h := &Openat_Probe{}
	h.name = "openat_bpf"
	probes.RegisterProbe(h)
}

func (p *Openat_Probe) Name() string {
	return p.name
}

func (p *Openat_Probe) Start() {

	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	p.bpf = &objs

	kp, err := link.Tracepoint("syscalls", "sys_enter_openat", objs.TracepointOpenat, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	p.link = kp

	rd, err := ringbuf.NewReader(objs.SysEnterOpenatEvents)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	p.reader = rd

	log.Println("Waiting for events..")

	go func() {
		// bpfEvent is generated by bpf2go.
		var event bpfSysOpenatEvent
		for {
			record, err := rd.Read()
			if err != nil {
				if errors.Is(err, ringbuf.ErrClosed) {
					log.Println("Received signal, exiting..")
					return
				}
				log.Printf("reading from reader: %s", err)
				continue
			}

			// Parse the ringbuf event entry into a bpfEvent structure.
			if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
				log.Printf("parsing ringbuf event: %s", err)
				continue
			}

			log.Printf("pid: %d\tcomm: %s\tfilename: %s\n", event.Pid,
				unix.ByteSliceToString(event.Comm[:]),
				unix.ByteSliceToString(event.Filename[:]))
		}
	}()

}

func (p *Openat_Probe) Stop() {
	p.bpf.Close()
	p.link.Close()
	p.reader.Close()
}
