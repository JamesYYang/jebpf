package capable

import (
	"bytes"
	"encoding/binary"
	"errors"
	"fmt"
	"log"

	"github.com/JamesYYang/jebpf/probes"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
)

var caps []string

type SysCapable_Probe struct {
	name   string
	bpf    *bpfObjects
	link   link.Link
	reader *ringbuf.Reader
}

func init() {
	h := &SysCapable_Probe{}
	h.name = "syscapable_bpf"
	caps = []string{
		"CAP_CHOWN",
		"CAP_DAC_OVERRIDE",
		"CAP_DAC_READ_SEARCH",
		"CAP_FOWNER",
		"CAP_FSETID",
		"CAP_KILL",
		"CAP_SETGID",
		"CAP_SETUID",
		"CAP_SETPCAP",
		"CAP_LINUX_IMMUTABLE",
		"CAP_NET_BIND_SERVIC",
		"CAP_NET_BROADCAST",
		"CAP_NET_ADMIN",
		"CAP_NET_RAW",
		"CAP_IPC_LOCK",
		"CAP_IPC_OWNER",
		"CAP_SYS_MODULE",
		"CAP_SYS_RAWIO",
		"CAP_SYS_CHROOT",
		"CAP_SYS_PTRACE",
		"CAP_SYS_PACCT",
		"CAP_SYS_ADMIN",
		"CAP_SYS_BOOT",
		"CAP_SYS_NICE",
		"CAP_SYS_RESOURCE",
		"CAP_SYS_TIME",
		"CAP_SYS_TTY_CONFIG",
		"CAP_MKNOD",
		"CAP_LEASE",
		"CAP_AUDIT_WRITE",
		"CAP_AUDIT_CONTROL",
		"CAP_SETFCAP",
		"CAP_MAC_OVERRIDE",
		"CAP_MAC_ADMIN",
		"CAP_SYSLOG",
		"CAP_WAKE_ALARM",
		"CAP_BLOCK_SUSPEND",
		"CAP_AUDIT_READ",
		"CAP_PERFMON",
		"CAP_BPF",
	}
	probes.RegisterProbe(h)
}

func (p *SysCapable_Probe) Name() string {
	return p.name
}

func (p *SysCapable_Probe) Start() {

	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	p.bpf = &objs

	kp, err := link.Kprobe("cap_capable", objs.KpSysCapable, nil)
	if err != nil {
		log.Fatalf("opening tracepoint: %s", err)
	}
	p.link = kp

	rd, err := ringbuf.NewReader(objs.SysCapableEvents)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	p.reader = rd

	log.Println("Waiting for events..")
	fmt.Printf("%-8s %-8s %-4s %-20s %-6s %-16s\n",
		"UID",
		"PID",
		"CAP",
		"NAME",
		"AUDIT",
		"COMM",
	)

	go func() {
		// bpfEvent is generated by bpf2go.
		var event bpfSysCapableEvent
		for {
			record, err := rd.Read()
			if err != nil {
				if errors.Is(err, ringbuf.ErrClosed) {
					log.Println("Received signal, exiting..")
					return
				}
				log.Printf("reading from reader: %s", err)
				continue
			}

			// Parse the ringbuf event entry into a bpfEvent structure.
			if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
				log.Printf("parsing ringbuf event: %s", err)
				continue
			}

			fmt.Printf("%-8d %-8d %-4d %-20s %-6d %-16s\n",
				event.Uid,
				event.Pid,
				event.Cap,
				caps[int(event.Cap)],
				event.Audit,
				event.Comm)
		}
	}()

}

func (p *SysCapable_Probe) Stop() {
	p.bpf.Close()
	p.link.Close()
	p.reader.Close()
}
