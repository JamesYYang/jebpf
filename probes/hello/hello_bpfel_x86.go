// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64
// +build 386 amd64

package hello

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadKpHello returns the embedded CollectionSpec for kpHello.
func loadKpHello() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_KpHelloBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load kpHello: %w", err)
	}

	return spec, err
}

// loadKpHelloObjects loads kpHello and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*kpHelloObjects
//	*kpHelloPrograms
//	*kpHelloMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadKpHelloObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadKpHello()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// kpHelloSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kpHelloSpecs struct {
	kpHelloProgramSpecs
	kpHelloMapSpecs
}

// kpHelloSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kpHelloProgramSpecs struct {
	HandleTp *ebpf.ProgramSpec `ebpf:"handle_tp"`
}

// kpHelloMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type kpHelloMapSpecs struct {
}

// kpHelloObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadKpHelloObjects or ebpf.CollectionSpec.LoadAndAssign.
type kpHelloObjects struct {
	kpHelloPrograms
	kpHelloMaps
}

func (o *kpHelloObjects) Close() error {
	return _KpHelloClose(
		&o.kpHelloPrograms,
		&o.kpHelloMaps,
	)
}

// kpHelloMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadKpHelloObjects or ebpf.CollectionSpec.LoadAndAssign.
type kpHelloMaps struct {
}

func (m *kpHelloMaps) Close() error {
	return _KpHelloClose()
}

// kpHelloPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadKpHelloObjects or ebpf.CollectionSpec.LoadAndAssign.
type kpHelloPrograms struct {
	HandleTp *ebpf.Program `ebpf:"handle_tp"`
}

func (p *kpHelloPrograms) Close() error {
	return _KpHelloClose(
		p.HandleTp,
	)
}

func _KpHelloClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed hello_bpfel_x86.o
var _KpHelloBytes []byte
