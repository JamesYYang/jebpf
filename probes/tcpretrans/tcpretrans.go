package tcpretrans

import (
	"bytes"
	"encoding/binary"
	"errors"
	"log"
	"net"

	"github.com/JamesYYang/jebpf/probes"
	"github.com/cilium/ebpf/link"
	"github.com/cilium/ebpf/ringbuf"
)

type TcpRetrans_Probe struct {
	name   string
	bpf    *bpfObjects
	link   link.Link
	reader *ringbuf.Reader
}

func init() {
	h := &TcpRetrans_Probe{}
	h.name = "tcpretrans_bpf"
	probes.RegisterProbe(h)
}

func (p *TcpRetrans_Probe) Name() string {
	return p.name
}

func (p *TcpRetrans_Probe) Start() {

	objs := bpfObjects{}
	if err := loadBpfObjects(&objs, nil); err != nil {
		log.Fatalf("loading objects: %v", err)
	}
	p.bpf = &objs

	kp, err := link.Kprobe("tcp_retransmit_skb", objs.KpTcpRetransmitSkb, nil)
	if err != nil {
		log.Fatalf("opening kprobe: %s", err)
	}
	p.link = kp

	rd, err := ringbuf.NewReader(objs.TcpRetransEvents)
	if err != nil {
		log.Fatalf("opening ringbuf reader: %s", err)
	}
	p.reader = rd

	log.Println("Waiting for events..")
	log.Printf("%-16s %-16s %-16s %-6s -> %-16s %-6s",
		"Comm",
		"Event",
		"Src addr",
		"Port",
		"Dest addr",
		"Port",
	)

	go func() {
		// bpfEvent is generated by bpf2go.
		var event bpfNetTcpEvent
		for {
			record, err := rd.Read()
			if err != nil {
				if errors.Is(err, ringbuf.ErrClosed) {
					log.Println("Received signal, exiting..")
					return
				}
				log.Printf("reading from reader: %s", err)
				continue
			}

			// Parse the ringbuf event entry into a bpfEvent structure.
			if err := binary.Read(bytes.NewBuffer(record.RawSample), binary.LittleEndian, &event); err != nil {
				log.Printf("parsing ringbuf event: %s", err)
				continue
			}

			log.Printf("%-16s %-16s %-16s %-6d -> %-16s %-6d",
				event.Comm,
				"RETRANS",
				intToIP(event.Saddr),
				event.Sport,
				intToIP(event.Daddr),
				event.Dport)
		}
	}()

}

func (p *TcpRetrans_Probe) Stop() {
	p.bpf.Close()
	p.link.Close()
	p.reader.Close()
}

// intToIP converts IPv4 number to net.IP
func intToIP(ipNum uint32) net.IP {
	ip := make(net.IP, 4)
	binary.LittleEndian.PutUint32(ip, ipNum)
	return ip
}
